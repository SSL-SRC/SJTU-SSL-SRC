<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\SSL_Ctrl_v13.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\SSL_Ctrl_v13.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Jun 17 15:47:04 2016
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; do_init &rArr; init_sys &rArr; init_robot &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2cf]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[60]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1f1]">VCP_COMConfig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f1]">VCP_COMConfig</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[60]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8e]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8f]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[90]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8d]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9d]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9c]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[86]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[87]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[88]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[89]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[92]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[93]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[94]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8b]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8c]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">EXTI0_IRQHandler</a> from action.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[76]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9f]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7e]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9e]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[97]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[96]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">JOYSTICK_Decode</a> from usbh_hid_joystick.o(.text) referenced 2 times from usbh_hid_joystick.o(.data)
 <LI><a href="#[2d]">JOYSTICK_Init</a> from usbh_hid_joystick.o(.text) referenced 2 times from usbh_hid_joystick.o(.data)
 <LI><a href="#[30]">KEYBRD_Decode</a> from usbh_hid_keybd.o(.text) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[2f]">KEYBRD_Init</a> from usbh_hid_keybd.o(.text) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[32]">MOUSE_Decode</a> from usbh_hid_mouse.o(.text) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[31]">MOUSE_Init</a> from usbh_hid_mouse.o(.text) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[47]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[91]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[78]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[99]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[98]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9b]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[77]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7f]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[81]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">SysTick_Handler</a> from robot.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a3]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[50]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">TIM2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[80]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[84]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[85]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[79]">TIM8_BRK_TIM12_IRQHandler</a> from usb_bsp.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7c]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[82]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[83]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">USART1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[74]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[75]">USART3_IRQHandler</a> from usart_ble.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[95]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">USBD_DataInStage</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[33]">USBD_DataOutStage</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3a]">USBD_IsoINIncomplete</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3b]">USBD_IsoOUTIncomplete</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[37]">USBD_Reset</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[39]">USBD_Resume</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[36]">USBD_SOF</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[35]">USBD_SetupStage</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[38]">USBD_Suspend</a> from usbd_core.o(.text) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[c]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[13]">USBD_USR_DeviceConnected</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[7]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[14]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[f]">USBD_USR_DeviceReset</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[12]">USBD_USR_DeviceResumed</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[11]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[e]">USBD_USR_Init</a> from usbd_usr.o(.text) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[d]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[8]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[9]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[a]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[b]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(.text) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[43]">USBD_cdc_GetCfgDesc</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[27]">USBH_Connected</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[28]">USBH_Disconnected</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[2b]">USBH_HID_ClassRequest</a> from usbh_hid_core.o(.text) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[2c]">USBH_HID_Handle</a> from usbh_hid_core.o(.text) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[2a]">USBH_HID_InterfaceDeInit</a> from usbh_hid_core.o(.text) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[29]">USBH_HID_InterfaceInit</a> from usbh_hid_core.o(.text) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[26]">USBH_SOF</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[1e]">USBH_USR_Configuration_DescAvailable</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[16]">USBH_USR_DeInit</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[1d]">USBH_USR_DeviceAddressAssigned</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[17]">USBH_USR_DeviceAttached</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[19]">USBH_USR_DeviceDisconnected</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[24]">USBH_USR_DeviceNotSupported</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[1b]">USBH_USR_DeviceSpeedDetected</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[1c]">USBH_USR_Device_DescAvailable</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[22]">USBH_USR_EnumerationDone</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[15]">USBH_USR_Init</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[1f]">USBH_USR_Manufacturer_String</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[1a]">USBH_USR_OverCurrentDetected</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[20]">USBH_USR_Product_String</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[18]">USBH_USR_ResetDevice</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[21]">USBH_USR_SerialNum_String</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[25]">USBH_USR_UnrecoveredError</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[23]">USBH_USR_UserInput</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[49]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4]">VCP_Ctrl</a> from usbd_cdc_vcp.o(.text) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[6]">VCP_DataRx</a> from usbd_cdc_vcp.o(.text) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[5]">VCP_DataTx</a> from usbd_cdc_vcp.o(.text) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[3]">VCP_DeInit</a> from usbd_cdc_vcp.o(.text) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[2]">VCP_Init</a> from usbd_cdc_vcp.o(.text) referenced 2 times from usbd_cdc_vcp.o(.data)
 <LI><a href="#[4e]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ac]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[ab]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[a8]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[a7]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[a9]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a6]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[a5]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[a0]">get_nRF24L01_packet</a> from nrf24l01.o(.text) referenced from comm.o(.text)
 <LI><a href="#[aa]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a2]">nrf24l01_init</a> from nrf24l01.o(.text) referenced from comm.o(.text)
 <LI><a href="#[a1]">send_nRF24L01_packet</a> from nrf24l01.o(.text) referenced from comm.o(.text)
 <LI><a href="#[40]">usbd_cdc_DataIn</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[41]">usbd_cdc_DataOut</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[3d]">usbd_cdc_DeInit</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[3f]">usbd_cdc_EP0_RxReady</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[3c]">usbd_cdc_Init</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[42]">usbd_cdc_SOF</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
 <LI><a href="#[3e]">usbd_cdc_Setup</a> from usbd_cdc_core.o(.text) referenced 2 times from usbd_cdc_core.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ac]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2f3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2f4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2f5]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2f6]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2f7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2c0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b0]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b2]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[2f8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2fa]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2fb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2fc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2fd]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[300]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[301]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[302]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[303]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[304]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[305]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[306]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[307]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[308]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[309]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[30a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[30b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[30c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[30d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[30e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[30f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[310]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[311]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[312]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[313]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ae]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[314]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[315]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; do_init &rArr; init_sys &rArr; init_robot &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[316]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2d0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[317]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a2]"></a>nrf24l01_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf24l01_init &rArr; L01_SetRXAddr &rArr; L01_WriteMultiReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_100us
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteSingleReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetTXAddr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetRXAddr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ClearIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>set_receive_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf24l01.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comm
</UL>

<P><STRONG><a name="[147]"></a>get_receive_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf24l01.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
</UL>

<P><STRONG><a name="[d0]"></a>clr_receive_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf24l01.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nRF24L01_packet
</UL>

<P><STRONG><a name="[c9]"></a>start_nRF24L01_RX</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = start_nRF24L01_RX &rArr; L01_SetTRMode &rArr; L01_ReadSingleReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetTRMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushTX
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushRX
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ClearIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comm
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[a0]"></a>get_nRF24L01_packet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_nRF24L01_packet &rArr; L01_ReadRXPayload &rArr; L01_ReadTopFIFOWidth &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadRXPayload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>send_nRF24L01_packet</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_nRF24L01_packet &rArr; L01_SetTRMode &rArr; L01_ReadSingleReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteTXPayload_NoAck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetTRMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushTX
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_receive_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>L01_ReadSingleReg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L01_ReadSingleReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetPower
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetSpeed
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetTRMode
</UL>

<P><STRONG><a name="[d3]"></a>L01_ReadMultiReg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[c5]"></a>L01_WriteSingleReg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L01_WriteSingleReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteHoppingPoint
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetPower
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetSpeed
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetTRMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24l01_init
</UL>

<P><STRONG><a name="[d4]"></a>L01_WriteMultiReg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L01_WriteMultiReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetTXAddr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_SetRXAddr
</UL>

<P><STRONG><a name="[cc]"></a>L01_FlushTX</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L01_FlushTX &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteTXPayload_Ack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nRF24L01_packet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nRF24L01_RX
</UL>

<P><STRONG><a name="[cb]"></a>L01_FlushRX</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L01_FlushRX &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadRXPayload
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nRF24L01_RX
</UL>

<P><STRONG><a name="[d5]"></a>L01_ReuseTXPayload</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[d6]"></a>L01_Nop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[d7]"></a>L01_ReadStatusReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L01_ReadStatusReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadIRQSource
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ClearIRQ
</UL>

<P><STRONG><a name="[c4]"></a>L01_ClearIRQ</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L01_ClearIRQ &rArr; L01_ReadStatusReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nRF24L01_RX
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24l01_init
</UL>

<P><STRONG><a name="[d8]"></a>L01_ReadIRQSource</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadStatusReg
</UL>

<P><STRONG><a name="[d9]"></a>L01_ReadTopFIFOWidth</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L01_ReadTopFIFOWidth &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadRXPayload
</UL>

<P><STRONG><a name="[cd]"></a>L01_ReadRXPayload</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L01_ReadRXPayload &rArr; L01_ReadTopFIFOWidth &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadTopFIFOWidth
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushRX
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nRF24L01_packet
</UL>

<P><STRONG><a name="[da]"></a>L01_WriteTXPayload_Ack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushTX
</UL>

<P><STRONG><a name="[ce]"></a>L01_WriteTXPayload_NoAck</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L01_WriteTXPayload_NoAck &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nRF24L01_packet
</UL>

<P><STRONG><a name="[db]"></a>L01_WriteRXPayload_InAck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[c8]"></a>L01_SetTXAddr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = L01_SetTXAddr &rArr; L01_WriteMultiReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteMultiReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24l01_init
</UL>

<P><STRONG><a name="[c7]"></a>L01_SetRXAddr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = L01_SetRXAddr &rArr; L01_WriteMultiReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteMultiReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24l01_init
</UL>

<P><STRONG><a name="[dc]"></a>L01_SetSpeed</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadSingleReg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteSingleReg
</UL>

<P><STRONG><a name="[dd]"></a>L01_SetPower</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadSingleReg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteSingleReg
</UL>

<P><STRONG><a name="[de]"></a>L01_WriteHoppingPoint</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf24l01_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteSingleReg
</UL>

<P><STRONG><a name="[ca]"></a>L01_SetTRMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf24l01_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = L01_SetTRMode &rArr; L01_ReadSingleReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadSingleReg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteSingleReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nRF24L01_packet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nRF24L01_RX
</UL>

<P><STRONG><a name="[df]"></a>stop_mode_packet</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = stop_mode_packet &rArr; get_cap_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_infra_broken
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cap_v
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bat_v
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm_up
</UL>

<P><STRONG><a name="[e3]"></a>packet</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = packet &rArr; do_power_monitor &rArr; is_power_low &rArr; get_bat_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ball_detected
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm_up
</UL>

<P><STRONG><a name="[146]"></a>get_packet_type</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_packet_type
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
</UL>

<P><STRONG><a name="[e6]"></a>decode_packet_robot</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decode_packet_robot &rArr; get_one_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
</UL>

<P><STRONG><a name="[e9]"></a>compare_data</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuid_identify
</UL>

<P><STRONG><a name="[e8]"></a>cpuid_identify</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpuid_identify &rArr; compare_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_identify_packet
</UL>

<P><STRONG><a name="[ea]"></a>decode_identify_packet</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decode_identify_packet &rArr; cpuid_identify &rArr; compare_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_timer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuid_identify
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
</UL>

<P><STRONG><a name="[ed]"></a>get_param_ch_sum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, param.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_param
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_def_param
</UL>

<P><STRONG><a name="[ec]"></a>init_def_param</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_def_param
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_param_ch_sum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_param
</UL>

<P><STRONG><a name="[ee]"></a>init_param</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_param
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_param_ch_sum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_blue_param
</UL>

<P><STRONG><a name="[ef]"></a>load_param</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = load_param &rArr; high_size_eeprom_wr &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_wr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_rd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_def_param
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_param_ch_sum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[f2]"></a>load_blue_param</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = load_blue_param &rArr; high_size_eeprom_wr &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_wr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[f8]"></a>calc_max_output</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step
</UL>

<P><STRONG><a name="[f5]"></a>pid_reinit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_motor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
</UL>

<P><STRONG><a name="[f4]"></a>pid_init</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pid_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reinit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[318]"></a>pid_set_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>pid_set_limit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>pid_set_torque_limit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>pid_step</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pid_step
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N2RPM
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_max_output
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_motor
</UL>

<P><STRONG><a name="[fb]"></a>gyro_pid_init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[112]"></a>gyro_control_calcuate</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[31b]"></a>pid_get_output</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>pid_set_param</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>init_robot</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, robot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = init_robot &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ir_pwm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dip_sw
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shooter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_pid_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_param
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[e5]"></a>do_power_monitor</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, robot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = do_power_monitor &rArr; is_power_low &rArr; get_bat_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_low
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cap_v
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet
</UL>

<P><STRONG><a name="[103]"></a>do_timer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, robot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = do_timer &rArr; update_motor &rArr; pid_step
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[105]"></a>do_run</STRONG> (Thumb, 1712 bytes, Stack size 0 bytes, robot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = do_run &rArr; do_joystick_packet &rArr; do_robot_command &rArr; do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_shooter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_motor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_shooter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_heart_led
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_move
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_joystick_packet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motion_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_control_calcuate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_timer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_monitor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nRF24L01_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>SysTick_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, robot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; do_timer &rArr; update_motor &rArr; pid_step
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sys_timer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_iwdog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[31d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>init_wait_timer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[11a]"></a>update_sys_timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[106]"></a>wait_ms</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_mode
</UL>

<P><STRONG><a name="[cf]"></a>wait_us</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms_with_dis_int
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dip_sw
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_100us
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nRF24L01_packet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_led_spi_wr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_probe_i2c_dev
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_read_dat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_send_dat
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rec_byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_i2c_ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[c6]"></a>wait_100us</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wait_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24l01_init
</UL>

<P><STRONG><a name="[11e]"></a>wait_ms_with_dis_int</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wait_ms_with_dis_int
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_wr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_wr
</UL>

<P><STRONG><a name="[11f]"></a>get_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_joystick_packet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_timer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_mode
</UL>

<P><STRONG><a name="[e7]"></a>get_one_timer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_one_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_identify_packet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_packet_robot
</UL>

<P><STRONG><a name="[108]"></a>check_timer</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[120]"></a>Init_com3</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Init_com3 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[124]"></a>SendString_USART3</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendString_USART3
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_mode
</UL>

<P><STRONG><a name="[127]"></a>SendChar_USART3</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usart_ble.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[128]"></a>get_uart_ble_ack_packet</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, usart_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hm_bluetooth_connect_status
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_mode
</UL>

<P><STRONG><a name="[12a]"></a>get_uart_ble_packet</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, usart_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_uart_ble_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
</UL>

<P><STRONG><a name="[75]"></a>USART3_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usart_ble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>update_shooter</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[113]"></a>set_test_shooter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[12e]"></a>shooter_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = shooter_off &rArr; shoot_off &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_off
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_off
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shooter
</UL>

<P><STRONG><a name="[131]"></a>set_shooter</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_shooter &rArr; shoot_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_on
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_off
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_on
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_off
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_handle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
</UL>

<P><STRONG><a name="[100]"></a>init_shooter</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_shooter &rArr; shooter_off &rArr; shoot_off &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shooter_off
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[134]"></a>infra_handle</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = infra_handle &rArr; set_shooter &rArr; shoot_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>do_dribbler</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = do_dribbler &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dribbler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_robot_command
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_robot_command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[10a]"></a>do_move</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_move
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V2N
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[114]"></a>do_acc_handle_move</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_move
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_robot_command
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_robot_command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[10b]"></a>do_shoot</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = do_shoot &rArr; set_shooter &rArr; shoot_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_ball_dect_int
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ball_dect_int
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ball_detected
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_robot_command
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_robot_command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[10c]"></a>do_chip</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = do_chip &rArr; set_shooter &rArr; shoot_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_ball_dect_int
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ball_dect_int
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ball_detected
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_robot_command
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_robot_command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[140]"></a>on_robot_command</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_robot_command &rArr; do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
</UL>

<P><STRONG><a name="[141]"></a>do_robot_command</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_robot_command &rArr; do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_joystick_packet
</UL>

<P><STRONG><a name="[54]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXTI0_IRQHandler &rArr; infra_handle &rArr; set_shooter &rArr; shoot_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>init_comm</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_comm &rArr; nrf24l01_init &rArr; L01_SetRXAddr &rArr; L01_WriteMultiReg &rArr; nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_nRF24L01_RX
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_receive_flag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24l01_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[144]"></a>do_comm_up</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = do_comm_up &rArr; packet &rArr; do_power_monitor &rArr; is_power_low &rArr; get_bat_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_packet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
</UL>

<P><STRONG><a name="[145]"></a>do_packet_process</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = do_packet_process &rArr; on_robot_command &rArr; do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm_up
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_robot_command
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_identify_packet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_packet_robot
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_type
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
</UL>

<P><STRONG><a name="[10e]"></a>do_comm</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = do_comm &rArr; do_packet_process &rArr; on_robot_command &rArr; do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hm_bluetooth_connect_status
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_packet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_receive_flag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_receive_flag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[110]"></a>do_joystick_packet</STRONG> (Thumb, 936 bytes, Stack size 96 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = do_joystick_packet &rArr; do_robot_command &rArr; do_acc_handle_move &rArr; __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_robot_command
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[14f]"></a>des_crypt56</STRONG> (Thumb, 270 bytes, Stack size 224 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_key
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dohash
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_CPUID
</UL>

<P><STRONG><a name="[151]"></a>encrypt_CPUID</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt56
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcute_encrpty_cpuid
</UL>

<P><STRONG><a name="[152]"></a>byte2str</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[154]"></a>str2byte</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[156]"></a>Init_wdg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_wdg &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[119]"></a>feed_iwdog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = feed_iwdog
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19a]"></a>init_gpio</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[15e]"></a>AT_test_mode</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AT_test_mode &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[15f]"></a>AT_Set_device_name</STRONG> (Thumb, 530 bytes, Stack size 64 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AT_Set_device_name &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[115]"></a>AT_Set_device_name_cmd</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AT_Set_device_name_cmd &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[116]"></a>AT_Set_device_name_code</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AT_Set_device_name_code &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[161]"></a>AT_Set_baudrate</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT_Set_baudrate &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[162]"></a>AT_Set_Pio1_status</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT_Set_Pio1_status &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[163]"></a>AT_Set_connect_mode</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT_Set_connect_mode &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[164]"></a>AT_Set_data_speed</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT_Set_data_speed &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[165]"></a>AT_Set_module_work_mode</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT_Set_module_work_mode &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[166]"></a>AT_Set_notify_mode</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT_Set_notify_mode &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
</UL>

<P><STRONG><a name="[167]"></a>Init_hm_blue_module</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Init_hm_blue_module &rArr; AT_Set_device_name &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[149]"></a>hm_bluetooth_connect_status</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, hm_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hm_bluetooth_connect_status &rArr; get_uart_ble_ack_packet &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
</UL>

<P><STRONG><a name="[168]"></a>I2C_MPU6050_GPIO_Config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_MPU6050_GPIO_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[16c]"></a>I2C_MPU6050_Mode_Config</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_MPU6050_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[170]"></a>I2C_MPU6050_ByteRead</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MPU6050_ByteRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RegData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WHO_AM_I
</UL>

<P><STRONG><a name="[178]"></a>i2c_stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_wr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_rd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_rd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_wr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_probe_i2c_dev
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_read_dat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_send_dat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_i2c_ack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_i2c
</UL>

<P><STRONG><a name="[179]"></a>init_i2c</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_i2c &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[17a]"></a>i2c_sta</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_sta
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_wr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_rd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_rd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_wr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_probe_i2c_dev
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_read_dat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_send_dat
</UL>

<P><STRONG><a name="[17b]"></a>is_i2c_ack</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>

<P><STRONG><a name="[17c]"></a>i2c_send_byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_i2c_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_wr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_rd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_rd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_wr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_probe_i2c_dev
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_read_dat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_send_dat
</UL>

<P><STRONG><a name="[17d]"></a>i2c_rec_byte</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_rec_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_rd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_rd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_read_dat
</UL>

<P><STRONG><a name="[17e]"></a>i2c_ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_size_eeprom_rd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_size_eeprom_rd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_read_dat
</UL>

<P><STRONG><a name="[17f]"></a>i2c_m_send_dat</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_m_send_dat &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_wr_byte
</UL>

<P><STRONG><a name="[180]"></a>i2c_m_read_dat</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rec_byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[181]"></a>m_probe_i2c_dev</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[182]"></a>low_size_eeprom_wr</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms_with_dis_int
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[183]"></a>low_size_eeprom_rd</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rec_byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[184]"></a>i2c_m_rd_byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_m_rd_byte &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rec_byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WHO_AM_I
</UL>

<P><STRONG><a name="[185]"></a>i2c_m_wr_byte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_m_wr_byte &rArr; i2c_m_send_dat &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_send_dat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[f1]"></a>high_size_eeprom_wr</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = high_size_eeprom_wr &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms_with_dis_int
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_blue_param
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_param
</UL>

<P><STRONG><a name="[f0]"></a>high_size_eeprom_rd</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = high_size_eeprom_rd &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rec_byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_sta
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_param
</UL>

<P><STRONG><a name="[186]"></a>setup_clock</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setup_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
</UL>

<P><STRONG><a name="[189]"></a>setup_NVIC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setup_NVIC &rArr; init_ball_dect_irq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ball_dect_irq
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
</UL>

<P><STRONG><a name="[18d]"></a>setup_GPIO</STRONG> (Thumb, 822 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = setup_GPIO &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
</UL>

<P><STRONG><a name="[18e]"></a>sys_tick_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sys_tick_init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
</UL>

<P><STRONG><a name="[31e]"></a>read_cpu_id</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>calcute_encrpty_cpuid</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_CPUID
</UL>

<P><STRONG><a name="[191]"></a>LOCK_FLASH_RDP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Lock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>

<P><STRONG><a name="[117]"></a>UNLOCK_FLASH_RDP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UNLOCK_FLASH_RDP &rArr; FLASH_OB_RDPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Lock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[199]"></a>init_sys</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = init_sys &rArr; init_robot &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comm
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_com3
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wait_timer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_blue_param
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nf24l01_spi
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_pwm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dribbler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caulate_adc_offset
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_i2c
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Mode_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_GPIO_Config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_hm_blue_module
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gpio
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
</UL>

<P><STRONG><a name="[1a6]"></a>do_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = do_init &rArr; init_sys &rArr; init_robot &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GPIO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_NVIC
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; do_init &rArr; init_sys &rArr; init_robot &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a7]"></a>heart_led_spi_wr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heart_led_spi_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_heart_led
</UL>

<P><STRONG><a name="[10d]"></a>set_heart_led</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_heart_led &rArr; heart_led_spi_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_led_spi_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_beat
</UL>

<P><STRONG><a name="[1a8]"></a>heart_beat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_heart_led
</UL>

<P><STRONG><a name="[12f]"></a>shoot_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shoot_off &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shooter_off
</UL>

<P><STRONG><a name="[130]"></a>chip_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chip_off &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shooter_off
</UL>

<P><STRONG><a name="[132]"></a>shoot_on</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shoot_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
</UL>

<P><STRONG><a name="[133]"></a>chip_on</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chip_on &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shooter
</UL>

<P><STRONG><a name="[19c]"></a>init_shoot_chip_timer</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_shoot_chip_timer &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[19e]"></a>init_dribbler</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_dribbler &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[138]"></a>set_dribbler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_dribbler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
</UL>

<P><STRONG><a name="[e4]"></a>is_ball_detected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet
</UL>

<P><STRONG><a name="[13e]"></a>start_ball_dect_int</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
</UL>

<P><STRONG><a name="[13f]"></a>stop_ball_dect_int</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
</UL>

<P><STRONG><a name="[18a]"></a>init_ball_dect_irq</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_ball_dect_irq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_NVIC
</UL>

<P><STRONG><a name="[1a0]"></a>init_ir_pwm</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_ir_pwm &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[101]"></a>start_ir_pwm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_ir_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[1b5]"></a>stop_ir_pwm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[f7]"></a>N2RPM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motor_speed
</UL>

<P><STRONG><a name="[31f]"></a>RPM2N</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>V2N</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_move
</UL>

<P><STRONG><a name="[320]"></a>N2V</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>init_adc</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[e1]"></a>get_cap_v</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_cap_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_monitor
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_packet
</UL>

<P><STRONG><a name="[e0]"></a>get_bat_v</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_bat_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_low
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_packet
</UL>

<P><STRONG><a name="[19f]"></a>init_nf24l01_spi</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_nf24l01_spi &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[d2]"></a>nrf_spi_wr_rd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spi_wr_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteRXPayload_InAck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteTXPayload_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadTopFIFOWidth
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadStatusReg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_Nop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReuseTXPayload
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteMultiReg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadMultiReg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadSingleReg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteTXPayload_NoAck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_WriteSingleReg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ReadRXPayload
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushTX
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_FlushRX
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L01_ClearIRQ
</UL>

<P><STRONG><a name="[fa]"></a>read_dip_sw</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_dip_sw
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[e2]"></a>is_infra_broken</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_packet
</UL>

<P><STRONG><a name="[102]"></a>is_power_low</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = is_power_low &rArr; get_bat_v &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bat_v
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_monitor
</UL>

<P><STRONG><a name="[1c1]"></a>init_one_encoder</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = init_one_encoder &rArr; TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_encoder
</UL>

<P><STRONG><a name="[1c5]"></a>init_test_speed_timer</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_encoder
</UL>

<P><STRONG><a name="[1c4]"></a>init_encoder</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = init_encoder &rArr; init_one_encoder &rArr; TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_speed_timer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_one_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor
</UL>

<P><STRONG><a name="[1c7]"></a>start_encoder</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_motor
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_encoder
</UL>

<P><STRONG><a name="[1c6]"></a>update_encoder</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_encoder
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_motor
</UL>

<P><STRONG><a name="[1d3]"></a>stop_encoder</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, motor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_motor
</UL>

<P><STRONG><a name="[1d0]"></a>set_motor_dir</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_motor_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_motor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_motor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor
</UL>

<P><STRONG><a name="[1cf]"></a>set_motor_break</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_motor_break
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_motor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor
</UL>

<P><STRONG><a name="[1d1]"></a>set_motor_pwm</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_motor_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_motor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_motor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor
</UL>

<P><STRONG><a name="[1c8]"></a>init_motor_pwm_tim</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_motor_pwm_tim &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor
</UL>

<P><STRONG><a name="[19d]"></a>init_motor</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = init_motor &rArr; init_encoder &rArr; init_one_encoder &rArr; TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_break
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_dir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[104]"></a>update_motor</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_motor &rArr; pid_step
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_dir
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_timer
</UL>

<P><STRONG><a name="[107]"></a>start_motor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_motor
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reinit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_encoder
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[1d2]"></a>stop_motor</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_break
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_dir
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_encoder
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[1d4]"></a>get_motor_speed</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;N2RPM
</UL>

<P><STRONG><a name="[1d5]"></a>MPU6050_WHO_AM_I</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mpu6050_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU6050_WHO_AM_I &rArr; i2c_m_rd_byte &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_rd_byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[1a2]"></a>InitMPU6050</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mpu6050_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitMPU6050 &rArr; i2c_m_wr_byte &rArr; i2c_m_send_dat &rArr; i2c_send_byte &rArr; is_i2c_ack &rArr; i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WHO_AM_I
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_m_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[1d6]"></a>MPU6050_is_DRY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu6050_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[1d8]"></a>Get_RegData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mpu6050_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_RegData &rArr; I2C_MPU6050_ByteRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motion_data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caulate_adc_offset
</UL>

<P><STRONG><a name="[1a4]"></a>Caulate_adc_offset</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mpu6050_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Caulate_adc_offset &rArr; Get_RegData &rArr; I2C_MPU6050_ByteRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RegData
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[111]"></a>Get_Motion_data</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mpu6050_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Motion_data &rArr; Get_RegData &rArr; I2C_MPU6050_ByteRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RegData
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[1db]"></a>Lowpass_1nd_caulate</STRONG> (Thumb, 1070 bytes, Stack size 96 bytes, mpu6050_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[44]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2cf]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e3]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_BSP_Init &rArr; USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1e5]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1e6]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[1ed]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevConnect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ActiveRemoteWakeup
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[1ee]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_BSP_ConfigVBUS &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[1ef]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[79]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[1f6]"></a>HID_MOUSE_UpdatePosition</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_MOUSE_UpdatePosition
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_ProcessData
</UL>

<P><STRONG><a name="[1f7]"></a>HID_MOUSE_ButtonPressed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_ProcessData
</UL>

<P><STRONG><a name="[1f4]"></a>HID_MOUSE_ButtonReleased</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_ProcessData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_Init
</UL>

<P><STRONG><a name="[15]"></a>USBH_USR_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_USR_Configuration_DescAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 20 bytes, Stack size 112 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBH_USR_Product_String</STRONG> (Thumb, 20 bytes, Stack size 112 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBH_USR_Product_String &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 20 bytes, Stack size 112 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBH_USR_SerialNum_String &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBH_USR_UserInput</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>USR_MOUSE_Init</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USR_MOUSE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MOUSE_ButtonReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Init
</UL>

<P><STRONG><a name="[1f5]"></a>USR_MOUSE_ProcessData</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USR_MOUSE_ProcessData &rArr; HID_MOUSE_UpdatePosition
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MOUSE_ButtonReleased
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MOUSE_ButtonPressed
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MOUSE_UpdatePosition
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Decode
</UL>

<P><STRONG><a name="[24f]"></a>USR_KEYBRD_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Init
</UL>

<P><STRONG><a name="[250]"></a>USR_KEYBRD_ProcessData</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Decode
</UL>

<P><STRONG><a name="[16]"></a>USBH_USR_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[1f8]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1b8]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc
</UL>

<P><STRONG><a name="[321]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc
</UL>

<P><STRONG><a name="[322]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc
</UL>

<P><STRONG><a name="[323]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cap_v
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bat_v
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc
</UL>

<P><STRONG><a name="[1ba]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cap_v
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bat_v
</UL>

<P><STRONG><a name="[328]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>ADC_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cap_v
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bat_v
</UL>

<P><STRONG><a name="[33d]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ball_dect_irq
</UL>

<P><STRONG><a name="[341]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ball_dect_irq
</UL>

<P><STRONG><a name="[344]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>FLASH_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[198]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[1fb]"></a>FLASH_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1fa]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[1fc]"></a>FLASH_EraseSector</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1fd]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1fe]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ff]"></a>FLASH_ProgramWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[200]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[201]"></a>FLASH_ProgramByte</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[194]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[197]"></a>FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[202]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[195]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_OB_RDPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[203]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[34c]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>FLASH_OB_Launch</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[34d]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK_FLASH_RDP
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FLASH_RDP
</UL>

<P><STRONG><a name="[34f]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[16a]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GPIO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_GPIO_Config
</UL>

<P><STRONG><a name="[353]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_is_DRY
</UL>

<P><STRONG><a name="[355]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[1e8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[358]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GPIO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_GPIO_Config
</UL>

<P><STRONG><a name="[206]"></a>I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[16d]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Mode_Config
</UL>

<P><STRONG><a name="[35b]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Mode_Config
</UL>

<P><STRONG><a name="[172]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[177]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[174]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[16f]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_Mode_Config
</UL>

<P><STRONG><a name="[35c]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[176]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[365]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[36d]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_ByteRead
</UL>

<P><STRONG><a name="[36e]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>I2C_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>

<P><STRONG><a name="[15a]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>

<P><STRONG><a name="[15b]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>

<P><STRONG><a name="[15c]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_iwdog
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>

<P><STRONG><a name="[15d]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>

<P><STRONG><a name="[371]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_NVIC
</UL>

<P><STRONG><a name="[18c]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ball_dect_irq
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_NVIC
</UL>

<P><STRONG><a name="[1e2]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[372]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_misc.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_misc.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[208]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[376]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_wdg
</UL>

<P><STRONG><a name="[379]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[385]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_clock
</UL>

<P><STRONG><a name="[1e4]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[389]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_clock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MPU6050_GPIO_Config
</UL>

<P><STRONG><a name="[188]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_clock
</UL>

<P><STRONG><a name="[205]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[38a]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1f9]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[38c]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1bc]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nf24l01_spi
</UL>

<P><STRONG><a name="[395]"></a>I2S_Init</STRONG> (Thumb, 350 bytes, Stack size 36 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nf24l01_spi
</UL>

<P><STRONG><a name="[398]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[1bf]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[39f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_wr_rd
</UL>

<P><STRONG><a name="[3a5]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3a8]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ball_dect_irq
</UL>

<P><STRONG><a name="[3a9]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1ad]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_one_encoder
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_pwm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dribbler
</UL>

<P><STRONG><a name="[3ac]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
</UL>

<P><STRONG><a name="[1b0]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
</UL>

<P><STRONG><a name="[3b5]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_on
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_off
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_on
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_off
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_motor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ir_pwm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_motor
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_one_encoder
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_ir_pwm
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_pwm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dribbler
</UL>

<P><STRONG><a name="[1af]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_pwm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dribbler
</UL>

<P><STRONG><a name="[1ae]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
</UL>

<P><STRONG><a name="[1c9]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
</UL>

<P><STRONG><a name="[1cb]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
</UL>

<P><STRONG><a name="[3b6]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_on
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dribbler
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_on
</UL>

<P><STRONG><a name="[3b8]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir_pwm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dribbler
</UL>

<P><STRONG><a name="[1b2]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
</UL>

<P><STRONG><a name="[1ca]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
</UL>

<P><STRONG><a name="[1cc]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
</UL>

<P><STRONG><a name="[3be]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_on
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_off
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_on
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shoot_chip_timer
</UL>

<P><STRONG><a name="[3cd]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[211]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[20f]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[20d]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[1c3]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_one_encoder
</UL>

<P><STRONG><a name="[3ce]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3cf]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_pwm_tim
</UL>

<P><STRONG><a name="[3d5]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[3d7]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[3da]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[215]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[217]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[219]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[218]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[21a]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[3de]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_one_encoder
</UL>

<P><STRONG><a name="[3e1]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[121]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_com3
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_COMConfig
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_Init
</UL>

<P><STRONG><a name="[3e3]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_com3
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_COMConfig
</UL>

<P><STRONG><a name="[3e6]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_USART3
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
</UL>

<P><STRONG><a name="[12c]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[3e9]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_com3
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_COMConfig
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_Init
</UL>

<P><STRONG><a name="[125]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_USART3
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString_USART3
</UL>

<P><STRONG><a name="[12d]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[3f6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBH_Disconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[21c]"></a>USBH_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[1a3]"></a>USBH_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[21f]"></a>USBH_HandleControl</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[231]"></a>USBH_ErrorHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[10f]"></a>USBH_Process</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[230]"></a>USBH_Open_Channel</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[228]"></a>USBH_Modify_Channel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[22e]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[21d]"></a>USBH_Free_Channel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>

<P><STRONG><a name="[232]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[235]"></a>USBH_CtlReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Report
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Idle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Protocol
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[220]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[224]"></a>USBH_CtlSendData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[223]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[238]"></a>USBH_BulkSendData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[239]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[23a]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[23b]"></a>USBH_InterruptSendData</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[23c]"></a>USBH_IsocReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[23d]"></a>USBH_IsocSendData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[23e]"></a>USBH_GetDescriptor</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_Descriptor
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_ReportDescriptor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[226]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[241]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[22a]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[22b]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[229]"></a>USBH_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[22c]"></a>USBH_SetCfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[245]"></a>USBH_SetInterface</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbh_stdreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[246]"></a>USBH_ClrFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[24e]"></a>USBH_Set_Report</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, usbh_hid_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[261]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[279]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[26c]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[252]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[26e]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[26d]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[253]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[254]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[255]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[257]"></a>USB_OTG_GetMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[256]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[258]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[27a]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[3f7]"></a>USB_OTG_ReadOtgItr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableHostInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[25c]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[25b]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[25d]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
</UL>

<P><STRONG><a name="[25f]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[25e]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[24d]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[275]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[233]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
</UL>

<P><STRONG><a name="[260]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 502 bytes, Stack size 60 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[247]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[272]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[262]"></a>USB_OTG_StopHost</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[265]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[263]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableDevInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[264]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2aa]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[2a9]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[29f]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[2a0]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[266]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[2a1]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[26a]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetEPStatus
</UL>

<P><STRONG><a name="[26b]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetEPStatus
</UL>

<P><STRONG><a name="[2b2]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[2b3]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[2af]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[28f]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
</UL>

<P><STRONG><a name="[267]"></a>USB_OTG_ActiveRemoteWakeup</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[3f8]"></a>USB_OTG_UngateClock</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>USB_OTG_StopDevice</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[2a6]"></a>USB_OTG_GetEPStatus</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_GetEPStatus
</UL>

<P><STRONG><a name="[269]"></a>USB_OTG_SetEPStatus</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_SetEPStatus
</UL>

<P><STRONG><a name="[21e]"></a>HCD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[22f]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[227]"></a>HCD_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[22d]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[222]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[221]"></a>HCD_GetURB_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[3f9]"></a>HCD_GetXferCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>HCD_GetHCState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>HCD_HC_Init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_hcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>

<P><STRONG><a name="[237]"></a>HCD_SubmitRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocSendData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocReceiveData
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptSendData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[11b]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[27e]"></a>USBD_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1a5]"></a>USBD_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_Init &rArr; DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sys
</UL>

<P><STRONG><a name="[296]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[297]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[28b]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Setup
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[287]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[28d]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlPrepareRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Setup
</UL>

<P><STRONG><a name="[285]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[286]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[288]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[3fb]"></a>USBD_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ioreq.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Setup
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[281]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[282]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[283]"></a>USBD_StdEPReq</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[280]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1f2]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
</UL>

<P><STRONG><a name="[27f]"></a>DCD_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[28a]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[29d]"></a>DCD_EP_Close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_DeInit
</UL>

<P><STRONG><a name="[28e]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_DataOut
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[28c]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_DataIn
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[284]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[29b]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2a2]"></a>DCD_EP_Flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[299]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[2a3]"></a>DCD_DevConnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[2a4]"></a>DCD_DevDisconnect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[2a5]"></a>DCD_GetEPStatus</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetEPStatus
</UL>

<P><STRONG><a name="[2a7]"></a>DCD_SetEPStatus</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usb_dcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetEPStatus
</UL>

<P><STRONG><a name="[11c]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2str
</UL>

<P><STRONG><a name="[2bb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2bc]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2ba]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b1]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3fc]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[155]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2byte
</UL>

<P><STRONG><a name="[2c2]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[160]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_packet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_CPUID
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOYSTICK_Decode
</UL>

<P><STRONG><a name="[2c4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3fd]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3fe]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_comm_up
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_param
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_def_param
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_identify_packet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOYSTICK_Init
</UL>

<P><STRONG><a name="[2c5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[401]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_packet_process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_ble_ack_packet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_code
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name_cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_blue_param
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_notify_mode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_module_work_mode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_data_speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_connect_mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_Pio1_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_baudrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Set_device_name
</UL>

<P><STRONG><a name="[402]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[404]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[2c9]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2bd]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[2b9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[a5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[2ca]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[2cb]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b3]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2c3]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[2c1]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[a6]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[407]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2cc]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[409]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2cd]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[bf]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[2df]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[40b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[40d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1dc]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
</UL>

<P><STRONG><a name="[13a]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
</UL>

<P><STRONG><a name="[ff]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[fd]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
</UL>

<P><STRONG><a name="[2dc]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2de]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2d6]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2dd]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2d2]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2d9]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2db]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2d4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2bf]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2da]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2d5]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[ab]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[40e]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[40f]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[410]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[411]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[412]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motion_data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
</UL>

<P><STRONG><a name="[2e0]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[2e3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[2ea]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motion_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2e6]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2e7]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
</UL>

<P><STRONG><a name="[2e8]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motion_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[413]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[414]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1df]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
</UL>

<P><STRONG><a name="[2e9]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2ed]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dribbler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2eb]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2e2]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2e5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[2ec]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2d7]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2ee]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2f0]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_acc_handle_move
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_robot
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lowpass_1nd_caulate
</UL>

<P><STRONG><a name="[2f1]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2f2]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[b5]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[415]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[416]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2e1]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11d]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[13d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shoot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_chip
</UL>

<P><STRONG><a name="[14b]"></a>permute</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dohash
</UL>

<P><STRONG><a name="[14c]"></a>lshift</STRONG> (Thumb, 52 bytes, Stack size 76 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dohash
</UL>

<P><STRONG><a name="[14d]"></a>concat</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dohash
</UL>

<P><STRONG><a name="[14e]"></a>xor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dohash
</UL>

<P><STRONG><a name="[14a]"></a>dohash</STRONG> (Thumb, 588 bytes, Stack size 1400 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lshift
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;permute
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt56
</UL>

<P><STRONG><a name="[150]"></a>str_to_key</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cpuid_des.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_crypt56
</UL>

<P><STRONG><a name="[1e1]"></a>USB_OTG_BSP_TimeInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[1e9]"></a>BSP_SetTime</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[1ec]"></a>BSP_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[2]"></a>VCP_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbd_cdc_vcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = VCP_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>VCP_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_vcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[1f1]"></a>VCP_COMConfig</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, usbd_cdc_vcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = VCP_COMConfig &rArr;  VCP_COMConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_COMConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_Ctrl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_COMConfig
</UL>

<P><STRONG><a name="[4]"></a>VCP_Ctrl</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, usbd_cdc_vcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = VCP_Ctrl &rArr; VCP_COMConfig &rArr;  VCP_COMConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_COMConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>VCP_DataTx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_cdc_vcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>VCP_DataRx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_cdc_vcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VCP_DataRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_vcp.o(.data)
</UL>
<P><STRONG><a name="[212]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[210]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[20e]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[20c]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[225]"></a>USBH_HandleEnum</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[234]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[236]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[23f]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[243]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[242]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[240]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[244]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[29]"></a>USBH_HID_InterfaceInit</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBH_HID_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBH_HID_InterfaceDeInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_HID_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[248]"></a>USBH_Set_Protocol</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_Set_Protocol &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[249]"></a>USBH_Set_Idle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Set_Idle &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[24a]"></a>USBH_Get_HID_ReportDescriptor</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_HID_ReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[24c]"></a>USBH_ParseHIDDesc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_hid_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[24b]"></a>USBH_Get_HID_Descriptor</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_HID_Descriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[2b]"></a>USBH_HID_ClassRequest</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_HID_ClassRequest &rArr; USBH_Get_HID_Descriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_Descriptor
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseHIDDesc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_ReportDescriptor
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Idle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Protocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBH_HID_Handle</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, usbh_hid_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HID_Handle &rArr; USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>JOYSTICK_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_hid_joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOYSTICK_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_joystick.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>JOYSTICK_Decode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_hid_joystick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOYSTICK_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_joystick.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>KEYBRD_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_hid_keybd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEYBRD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>KEYBRD_Decode</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, usbh_hid_keybd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEYBRD_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>MOUSE_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_hid_mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOUSE_Init &rArr; USR_MOUSE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>MOUSE_Decode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_hid_mouse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MOUSE_Decode &rArr; USR_MOUSE_ProcessData &rArr; HID_MOUSE_UpdatePosition
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[25a]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[251]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[27d]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[27c]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[270]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[271]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 1004 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[273]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[274]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[276]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[277]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[278]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[27b]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[35]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[289]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[34]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[291]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[292]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[293]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[294]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[295]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[298]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[29a]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[29c]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_req.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[3c]"></a>usbd_cdc_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_cdc_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>usbd_cdc_DeInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_cdc_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>usbd_cdc_Setup</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usbd_cdc_Setup &rArr; USBD_CtlPrepareRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>usbd_cdc_EP0_RxReady</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_cdc_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>usbd_cdc_DataIn</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_cdc_DataIn &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>usbd_cdc_DataOut</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_cdc_DataOut &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[29e]"></a>Handle_USBAsynchXfer</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Handle_USBAsynchXfer &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_SOF
</UL>

<P><STRONG><a name="[42]"></a>usbd_cdc_SOF</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_cdc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_cdc_SOF &rArr; Handle_USBAsynchXfer &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>USBD_cdc_GetCfgDesc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_cdc_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_core.o(.data)
</UL>
<P><STRONG><a name="[2b8]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b7]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2a8]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ab]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ac]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b6]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b5]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b4]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ad]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[2b0]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[2ae]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2b1]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ef]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[2e4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a8]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
